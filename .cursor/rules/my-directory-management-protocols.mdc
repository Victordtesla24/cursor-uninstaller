---
description:
globs:
alwaysApply: true
---
### Directory Management Protocol

**Pre- and Post-Requisites:**
Follow all related protocols (`@my-error-fixing-protocols.mdc`) with absolute precision before and after every change.

1. **Deployment Compliance**
   - Adhere to VERCEL (or equivalent) **deployment best practices**, **project directory structure** at all times.

2. **Comprehensive File Scan**
   - Recursively scan the entire repo—excluding `node_modules/`, `.venv/`, `.cursor/`, `.vscode/`, `coverage/`, and any `gitignore`-listed paths—for existing files, scripts, modules, and configurations.

3. **Duplicate Detection & Consolidation**
   - ***Never*** create a new file, script, or module until you have confirmed, verified and validated that any such file does ***not*** already exist in the `codebase` or it overlaps in functionality.
   - ***Strictly*** existing files, code or scripts within the `codebase` must be used; ***totally*** & ***absolutely*** duplicate files, code or scripts are ***`restricted`*** without any ***exception*** that includes files, code or scripts with same, extended or enhanced functionality with different names.
   - If you find ***duplicate or overlapping code***, ***merge*** or ***remove*** redundancies, preserving one canonical implementation.
   - Always solicit explicit user approval before introducing any new file or module that risks duplicating existing functionality.

4. **Strict “No Unrequested Files” Policy**
   - ***Do not*** create/generate any additional/duplicate files, scripts, or code  with different names, ***unless***:
     a. The user has explicitly requested creation of a new file/module.
     b. Failing to create it would break the solution—confirm with the user if in doubt.

5. **Correct Placement & Renaming**
   - Re-locate or rename any file to match the project’s directory conventions.
   - Update all import paths, exports, and references accordingly.

6. **Import & Path Integrity**
   - After any move or merge, run the **Recursive Import Error Fixing Algorithm** (per the Error Handling Protocol) to resolve broken imports within two attempts.

7. **Clean-Up of Redundant Assets**
   - Remove all orphaned, unused, or superseded files and code blocks.
   - Verify that no residual references exist to deleted items.

8. **Preserve Functionality**
   - Ensure zero feature regression: every existing test must still pass, and manual sanity checks should confirm core workflows remain intact.

9. **Refactoring Large Files**
   - If a file exceeds 600 lines, refactor into smaller, single-responsibility modules—without introducing duplication.

10. **Final Verification & Documentation**
    - Rerun all relevant test suites to confirm **no** import/path errors or test failures.
    - Record all structural changes (moved paths, merged modules, deletions) in the Memory Bank for future traceability.

---
> **Critical Constraints:**
> - **No functionality** may be added or removed beyond the targeted consolidation.
> - **Fail fast:** commit small changes, verify immediately, then proceed.
> - **Always** confirm with the user before creating any new file or script that isn’t strictly necessary.
